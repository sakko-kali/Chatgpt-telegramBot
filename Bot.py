from collections import defaultdict
import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatAction
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from main_ai import main_mistral
from settings import BOT_KEY, ADMIN_ID

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
if not BOT_KEY or BOT_KEY.isspace():
    raise ValueError("Bot token (BOT_KEY) –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")

TOKEN = BOT_KEY

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
OWNER_ID = ADMIN_ID  # Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
MEMORY_LIMIT_OWNER = 150
MEMORY_LIMIT_OTHERS = 25

# –°–æ–∑–¥–∞—Ç—å –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_memory = defaultdict(list)

dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –±–æ—Ç–∞")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
    ],
    resize_keyboard=True  # –ß—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–ª–∞—Å—å –ø–æ–¥ —ç–∫—Ä–∞–Ω
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç—å
def add_message_to_memory(user_id, role, content):
    limit = MEMORY_LIMIT_OWNER if user_id == OWNER_ID else MEMORY_LIMIT_OTHERS
    user_memory[user_id].append({"role": role, "content": content})

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
    if len(user_memory[user_id]) > limit:
        user_memory[user_id].pop(0)


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! "
        "–Ø –±–æ—Ç ChatGPT, –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.",
        reply_markup=menu_keyboard  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    )
    # –û–±–Ω–æ–≤–∏—Ç—å –ø–∞–º—è—Ç—å (–Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞)
    user_memory[message.from_user.id] = []  # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞


@dp.message(Command(commands=["clear"]))
async def clear_memory_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    if user_id in user_memory:
        user_memory.pop(user_id)  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
        await message.answer("–í–∞—à–∞ –ø–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞! üßπ", reply_markup=menu_keyboard)
    else:
        await message.answer("–í–∞—à–∞ –ø–∞–º—è—Ç—å —É–∂–µ –ø—É—Å—Ç–∞!", reply_markup=menu_keyboard)


@dp.message(lambda message: message.text == "–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –±–æ—Ç–∞")
async def clear_memory_button_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏."""
    user_id = message.from_user.id
    if user_id in user_memory:
        user_memory.pop(user_id)  # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–ü–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞! üßπ", reply_markup=menu_keyboard)
    else:
        await message.answer("–í–∞—à–∞ –ø–∞–º—è—Ç—å —É–∂–µ –ø—É—Å—Ç–∞!", reply_markup=menu_keyboard)


@dp.message()
async def echo_handler(message: Message) -> None:
    try:
        user_id = message.from_user.id
        content = message.text

        # –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
        add_message_to_memory(user_id, "user", content)

        # –£–≤–µ–¥–æ–º–∏—Ç—å, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
        bot = message.bot
        await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

        # –ü–µ—Ä–µ–¥–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ AI
        res = await main_mistral(user_memory[user_id])

        # –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç AI –≤ –ø–∞–º—è—Ç—å
        add_message_to_memory(user_id, "assistant", res)

        # –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(res, reply_markup=menu_keyboard)

    except KeyError:
        logging.error("KeyError: user_memory –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=menu_keyboard)

    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=menu_keyboard)


async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–ª–∞–¥–∫–∏
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
